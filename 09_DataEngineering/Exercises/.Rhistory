gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% arrange(desc(infant_mortality))
library(dslabs)
data(heights)
head(heights)
str(heights)
heights.summary<-heights %>%
filter(sex == "Female") %>%
summarize(
average = mean(height),
standard_deviation = sd(height)
)
heights.summary
heights %>%
group_by(sex)
head(heights)
heights %>%
group_by(height)
heights %>%
group_by(sex) %>%
summarize(
average = mean(height),
standard_deviation = sd(height)
)
heights %>%
group_by(sex) %>%
summarize()
heights %>%
group_by(sex) %>%
summarize(heights)
url="https://en.wikipedia.org/wiki/List_of_countries_by_intentional_homicide_rate"
h <- read_html(url)
class(h)
h
tab <- h %>% html_nodes("table")
head(tab)
tab <- tab[[4]] %>% html_table
head(tab)
tab <- tab %>%
select(starts_with("Country"),
Region,Count,Rate,starts_with("Year")) %>%
setNames(c("country", "continent", "total", "murder_rate","year"))
head(tab)
s <- murders %>%
mutate(rate=total/population*100000) %>%
summarize(average=mean(rate))%>%
.$average
s
s <- murders %>%
mutate(rate=total/population*100000) %>%
summarize(average=mean(rate))%>%
s
s <- murders %>%
mutate(rate=total/population*100000) %>%
summarize(average=mean(rate))
s
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dslabs)
library(devtools)
library(rvest)
library(janitor)
library(ggplot2movies)
#options(encoding = 'UTF-8')
tab_USA<-tab %>%
filter(year=="2015") %>%
select(-year) %>%
add_row(country = "USA",
continent = "Americas",
total = s2,
murder_rate=s)
s2<-murders %>%
summarize(total=sum(total)) %>%
.$total
s2
tab_USA<-tab %>%
filter(year=="2015") %>%
select(-year) %>%
add_row(country = "USA",
continent = "Americas",
total = s2,
murder_rate=s)
tab_USA
setwd("~/PROYECTOS/REPOS/REPOS-Github")
library(assertthat)
library(testthat)
install.packages("logging")
library(assertthat)
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(logging)
logging::loglevels
# true assertions
assert_that(3 > 1)
assert_that(is.character('a'))
assert_that(length(c(1, 2, 3)) == 3)
# false assertions
assert_that(1 > 3)
assert_that(is.character(3))
assert_that(length(c(1, 2, 3)) == 4)
# true assertion
assert_that(3 > 1, msg = "Number is not greater than threshold")
# false assertions
assert_that(1 > 3, msg = "Number is not greater than threshold")
assert_that(is.character(3), msg = "Type is not as expected")
assert_that(length(c(1, 2, 3)) == 4, msg = "Incorrect length vector")
fibonacci <- function(k){
if (k <= 1) {
return (1)
}else{
return (fibonacci(k-1) + fibonacci(k-2))
}
}
fibonacci(4)
fibonacci(203)
fibonacci(2)
fibonacci(20)
fibonacci(100)
fibonacci(1)
fibonacci(6)
assert_that(is.character(k), msg = "Type is not as expected")
assert_that(is.character(k), msg = "Type is not as expected")
fibonacci(3)
fibonacci(e)
fibonacci('45')
fibonacci <- function(k){
assert_that(k ==0, msg = "Type is not as expected")
if (k <= 1) {
return (1)
}else{
return (fibonacci(k-1) + fibonacci(k-2))
}
}
fibonacci(0)
fibonacci <- function(k){
assert_that(k >= 0, msg = "Type is not as expected")
if (k <= 1) {
return (1)
}else{
return (fibonacci(k-1) + fibonacci(k-2))
}
}
fibonacci(4)
fibonacci(0)
fibonacci <- function(k){
assert_that(k <= 0, msg = "Type is not as expected")
if (k <= 1) {
return (1)
}else{
return (fibonacci(k-1) + fibonacci(k-2))
}
}
fibonacci(0)
fibonacci <- function(k){
assert_that(k >= 0, msg = "Type is not as expected")
if (k <= 1) {
return (1)
}else{
return (fibonacci(k-1) + fibonacci(k-2))
}
}
fibonacci(-1)
We will use the `testthat` library for test execution.
```r
test_file('tests/test.math_functions.R')
```
```r
test_that("fib(1)", expect_true(fibonacci(1) == 1))
```
test_file('tests/test_math_functions.R')
test_file('tests/test.math_functions.R')
context("Testeando Math functions")
test_file('tests/test.math_functions.R')
test_file('tests/test.math_functions.R')
setwd("~/PROYECTOS/REPOS/REPOS-Github/master-data-science/09_DataEngineering_s10")
test_file('tests/test.math_functions.R')
test_file('tests/test.math_functions.R')
test_file('tests/test.math_functions.R')
test_file('tests/test.math_functions.R')
View(fibonacci)
test_file('tests/test.math_functions.R')
test_file('tests/test.math_functions.R')
fibonacci(4)
test_file('tests/test.math_functions.R')
library(logging)
logging::loglevels
basicConfig()
getLogger()[['handlers']]
getLogger()[['level']]
logerror('Writing error log')
logwarn('Writing warning log')
loginfo('Writing info log')
logdebug('Writing debug log')
logReset()
basicConfig(level='FINEST')
addHandler(writeToFile, file="testing.log", level='DEBUG')
getLogger()[['handlers']]
loginfo('test %d', 1)
logdebug('test %d', 2)
logwarn('test %d', 3)
logfinest('test %d', 4)
setwd("~/PROYECTOS/REPOS/REPOS-Github/master-data-science/09_DataEngineering_s10/Exercises")
source('main.R')
basicConfig()
getLogger()[['handlers']]
getLogger()[['level']]
main('get_data.R')
source(‘main.R’)
main('get_data.R')
source('get_data.R')
source('get_data.R')
source('main')
source('main.R')
source('main.R')
logReset()
basicConfig(level='FINEST')
addHandler(writeToFile, file="testing.log", level='DEBUG')
getLogger()[['handlers']]
loginfo('test %d', 1)
logdebug('test %d', 2)
logwarn('test %d', 3)
logfinest('test %d', 4)
source('main.R')
source('main.R')
source(‘get_data.R’)
source("get_data.R)
source("get_data.R")
source("get_data.R")
source("get_data.R")
source('main')
source('main.R')
data_wine(head)
head(data_wine)
source('main.R')
head(data_wine)
source('main.R')
colMeans(data_wine)
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
ncol(data_wine)
source('main')
source('main.R')
ncol(data_wine)
source('main.R')
source('main.R')
source('main.R')
source('main.R')
source('main.R')
ncol(data_wine)
source('main.R')
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
library(assertthat)
library(testthat)
data_wineR <- read.csv('wine_alcohol.csv', sep = '\t')
dim(data_wineR)
View(data_wineR)
data_wineR <- read.csv('wine_alcohol.csv', sep = ',')
dim(data_wineR)
View(data_wineR)
hist(rand.unif, freq = FALSE, xlab = 'x', density = 20)
hist(data_wineR, freq = FALSE, xlab = 'x', density = 20)
hist(data_wineR)
data_wineR <- read.csv('wine_alcohol.csv', sep = ',')
dim(data_wineR)
View(data_wineR)
hist(data_wineR)
boxplot(data_wineR.Alcohol$Magnesium, horizontal=TRUE, main="Robbery Rates in US")
boxplot(data_wineR$Alcohol, horizontal=TRUE, main="Robbery Rates in US")
boxplot(data_wineR$Alcohol,  main='Valores de alcohol')
library(ggplot2)
ggplot(ToothGrowth, aes(x=dose, y=len))
ggplot(data_wineR$Alcohol, aes(x=dose, y=len))
ggplot(data_wineR, aes(x=dose, y=len))
ggplot(data_wineR, aes(x=Alcohol, y=Magnesium))
ggplot(data_wineR, aes(x=Alcohol, y=Magnesium)) + geom_boxplot()
ggplot(data_wineR, aes(x=Alcohol, y=len)) + geom_boxplot()
ggplot(data_wineR, aes(x=Alcohol, y=Magnesium)) + geom_boxplot()
ggplot(data_wineR, aes(gx=Alcohol, y=class)) + geom_boxplot()
lcohol
ggplot(data_wineR, aes(x=Alcohol, y=class)) + geom_boxplot()
ggplot(data_wineR, aes(x=class, y=Alcohol)) + geom_boxplot()
ggplot(data_wineR, aes(x=as.factor(class), y=Alcohol)) + geom_boxplot(fill="slateblue", alpha=0.2) +
xlab("cyl")
ggplot(data_wineR, aes(x=as.factor(class), y=Alcohol)) + geom_boxplot(fill="slateblue", alpha=0.2)
data_wineR2 <- na.omit(data_wineR)
ggplot(data_wineR2, aes(x=as.factor(class), y=Alcohol)) + geom_boxplot(fill="slateblue", alpha=0.2)
# No hay NA, así que no tiene mucho sentido, sale lo mismo
summary(data_wineR2)
# No hay NA, así que no tiene mucho sentido, sale lo mismo
summary(data_wineR2$Alcohol)
# No hay NA, así que no tiene mucho sentido, sale lo mismo
summary(data_wineR2$Alcohol, data_wineR2$class)
# No hay NA, así que no tiene mucho sentido, sale lo mismo
summary(c(data_wineR2$Alcohol, data_wineR2$class))
count(data_wineR2$class)
library(dplyr)
count(data_wineR2$class)
data_wineR2 %>% group_by(class) %>% count()
data_wineR2$class <- as.factor(data_wineR2$class)
count(data_wineR2$class)
data_wineR2v %>% count(class)
data_wineR2 %>% count(class)
source('main.R')
data_wineR <- read.csv('wine_alcohol.csv', sep = ',')
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
data_wineR2 %>% group_by(alcohol)
data_wineR2 %>% group_by(Alcohol)
data_wineR2 %>% group_by(Alcohol) %>% count()
data_wineR2 %>% group_by(Alcohol>14) %>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol>14) %>% count()
data_wineR2 %>% group_by(class) %>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol>14) %>% count()
data_wineR2 %>% group_by(class) %>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol>14) %>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol > 14) %>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol > 14)
%>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol > 14) %>% count()
data_wineR2 %>% group_by(Alcohol > 14)
data_wineR2 %>% group_by(class) %>% count() %>% group_by(Alcohol > 14)
data_wineR3 <- data_wineR2(Alcohol > 14)
data_wineR2 <- na.omit(data_wineR)
data_wineR <- read.csv(FILE_OUTPUT, sep = ',')
data_wineR2 <- na.omit(data_wineR)
data_wineR3 <- data_wineR2(Alcohol > 14)
group_by(class, Alcohol > 14)
data_wineR2 %>% group_by(class) %>% select(Alcohol > 14) %>% count()
data_wineR2 %>% select(Alcohol > 14) %>% group_by(class) %>% count()
View(data_wineR2)
data_wineR2 %>% select(Alcohol > 14
data_wineR2 %>% select(Alcohol > 14)
data_wineR3 <- data_wineR2 %>% select(Alcohol > 14)
data_wineR3 <- data_wineR2 %>% select('Alcohol' > 14)
data_wineR2 <- select(data_wineR2, -X)
View(data_wineR2)
data_wineR2 %>% select(data_wineR2, Alcohol > 14) %>% group_by(class) %>% count()
data_wineR2 %>% select(data_wineR2, Alcohol > 14) %>% group_by(class)
data_wineR2 %>% group_by(class) %>% group_by(Alcohol > 14) %>% count()
data_wineR2 %>% group_by(class & Alcohol > 14) %>% count()
data_wineR2 %>% group_by(class) %>% group_by(Alcohol > 14) %>% count()
data_wineR2 %>% group_by(class) %>% filter(Alcohol > 14) %>% count()
data_wineR2 %>% group_by(class) %>% filter(Alcohol > 13) %>% count()
ggplot(data_wineC, aes(x=as.factor(class), y=n)) + geom_boxplot(fill="slateblue", alpha=0.2)
View(data_wineC)
# Agrupar el dataset por clases y de esas filtrar cuáles tienen más de 13 grados de alcohol
data_wineC <- data_wineR2 %>% group_by(class) %>% filter(Alcohol > 13) %>% count()
ggplot(data_wineC, aes(x=as.factor(class), y=n)) + geom_boxplot(fill="slateblue", alpha=0.2)
View(data_wineC)
# Agrupar el dataset por clases y de esas filtrar cuáles tienen más de 13 grados de alcohol
data_wineC <- data_wineR2 %>% group_by(class) %>% filter(Alcohol > 13) %>% count() %>% ggplot(data_wineC, aes(x=class, y=n)) + geom_boxplot(fill="slateblue", alpha=0.2)
ggplot(data_wineC, aes(x=class, y=n)) + geom_boxplot(fill="slateblue", alpha=0.2)
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity")
# Agrupar el dataset por clases y de esas filtrar cuáles tienen más de 13 grados de alcohol
data_wineC <- data_wineR2 %>% group_by(class) %>% filter(Alcohol > 13) %>% count() %>% ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity")
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar()
stat="identity"
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity")
help geom_bar
?geom_bar
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="count")
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar()
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity", , fill="steelblue")
ggplot(data_wineR, aes(x=class, y=n)) + geom_bar(stat="identity", , fill="steelblue")
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
ggplot(data_wineR, aes(x=class, y=n)) + geom_bar(stat="identity",)
data_wineA <- data_wineR2 %>% group_by(class) %>% count()
ggplot(data_wineA, aes(x=class, y=n)) + geom_bar(stat="identity")
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
par(mfrow=c(1,2)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
ggplot(data_wineA, aes(x=class, y=n)) + geom_bar(stat="identity")
par(mfrow=c(1,2))
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
ggplot(data_wineA, aes(x=class, y=n), add = TRUE) + geom_bar(stat="identity")
# Agrupar el dataset por clases y de esas filtrar cuáles tienen más de 13 grados de alcohol
data_wineR2 %>% filter(Alcohol > 13) %>% group_by(class) %>% count() %>%
ggplot(data_wineC, aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
# Agrupar el dataset por clases y de esas filtrar cuáles tienen más de 13 grados de alcohol
data_wineR2 %>% filter(Alcohol > 13) %>% group_by(class) %>% count() %>%
ggplot(aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
# Agrupar el dataset por clases y de esas filtrar cuáles tienen más de 13 grados de alcohol
data_wineR2 %>% filter(Alcohol > 13) %>% group_by(class) %>% count() %>%
ggplot(aes(x=class, y=n)) + geom_bar(stat="identity", fill="steelblue")
library(caret)
install.packages("caret")
library(caret)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
set.seed(825)
gbmFit2 <- train(Class ~ ., data = training,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmFit2
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
set.seed(825)
gbmFit2 <- train(Class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmFit2
nrow(gbmGrid)
?train
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
set.seed(825)
gbmFit2 <- train(Class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmFit2
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
set.seed(825)
gbmFit2 <- train(class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
set.seed(825)
gbmFit2 <- train(class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
gbmFit2 <- train(class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
set.seed(825)
gbmFit2 <- train(class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmFit2
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
nrow(gbmGrid)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
set.seed(825)
gbmFit2 <- train(class ~ ., data = data_wineR2,
method = "gbm",
trControl = fitControl,
verbose = FALSE,
## Now specify the exact models
## to evaluate:
tuneGrid = gbmGrid)
gbmFit2
gbmFit2$bestTune
