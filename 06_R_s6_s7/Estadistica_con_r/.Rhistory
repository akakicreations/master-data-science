library(tidyverse)
library(dslabs)
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)
library(ggplot2)
library(tidyverse)
library(dslabs)
library(rvest)
install.packages("rvest")
install.packages("janitor")
library(devtools)
library(tidyverse)
library(dslabs)
install.packages("ggplot2movies")
library(ggplot2movies)
library(devtools)
library(rvest)
library(janitor)
install.packages("gapminder")
library(tidyverse)
library(dslabs)
library(devtools)
library(rvest)
library(janitor)
library(ggplot2movies)
library(dslabs)
data(gapminder)
force(gapminder)
shape(gapminder)
summary(gapminder)
head(gapminder)
str(gapminder)
library(dplyr)
gapminder %>% filter (year == 2015 & country %in% c('Sri Lanka','Turkey')) %>% select(country, infant_mortality)
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality)
gapminder %>% filter (year == 2015) %>% sot(select(country, infant_mortality), decreasing = TRUE)
gapminder %>% filter (year == 2015) %>% sort(select(country, infant_mortality), decreasing = TRUE)
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% sort(decreasing = TRUE)
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% sort()
? sort
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% sort(infant_mortality, decreasing = FALSE)
gapminder %>% filter (year == 2015) %>% sort(x, decreasing = FALSE, ...) %>% select(country, infant_mortality)
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% order()
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% order(gapminder$infant_mortality)
gapminder %>% filter (year == 2015) %>% order(select(country, infant_mortality))
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% arrange(infant_mortality)
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% desc(infant_mortality)
gapminder %>% filter (year == 2015) %>% select(country, infant_mortality) %>% arrange(desc(infant_mortality))
library(dslabs)
data(heights)
head(heights)
str(heights)
heights.summary<-heights %>%
filter(sex == "Female") %>%
summarize(
average = mean(height),
standard_deviation = sd(height)
)
heights.summary
heights %>%
group_by(sex)
head(heights)
heights %>%
group_by(height)
heights %>%
group_by(sex) %>%
summarize(
average = mean(height),
standard_deviation = sd(height)
)
heights %>%
group_by(sex) %>%
summarize()
heights %>%
group_by(sex) %>%
summarize(heights)
url="https://en.wikipedia.org/wiki/List_of_countries_by_intentional_homicide_rate"
h <- read_html(url)
class(h)
h
tab <- h %>% html_nodes("table")
head(tab)
tab <- tab[[4]] %>% html_table
head(tab)
tab <- tab %>%
select(starts_with("Country"),
Region,Count,Rate,starts_with("Year")) %>%
setNames(c("country", "continent", "total", "murder_rate","year"))
head(tab)
s <- murders %>%
mutate(rate=total/population*100000) %>%
summarize(average=mean(rate))%>%
.$average
s
s <- murders %>%
mutate(rate=total/population*100000) %>%
summarize(average=mean(rate))%>%
s
s <- murders %>%
mutate(rate=total/population*100000) %>%
summarize(average=mean(rate))
s
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dslabs)
library(devtools)
library(rvest)
library(janitor)
library(ggplot2movies)
#options(encoding = 'UTF-8')
tab_USA<-tab %>%
filter(year=="2015") %>%
select(-year) %>%
add_row(country = "USA",
continent = "Americas",
total = s2,
murder_rate=s)
s2<-murders %>%
summarize(total=sum(total)) %>%
.$total
s2
tab_USA<-tab %>%
filter(year=="2015") %>%
select(-year) %>%
add_row(country = "USA",
continent = "Americas",
total = s2,
murder_rate=s)
tab_USA
setwd("~/PROYECTOS/REPOS/REPOS-Github/master-data-science/06_R_s6_s7/Estadistica_con_r")
install.packages("e1071")
setwd("C:/Users/ernesto.correa/Dropbox/kschool_master/Ejercicios ")
getwd()
datos<- read.table("Ejercicios/datos_eje1.txt", header = TRUE)
Head(datos)
datos
head(datos)
#Calculamos las frecuencias absolutas usamos la funci?n table()
absolutas <- table(datos$Calificacion)
absolutas
#Calculamos las frecuencias relativas usamos la funci?n prop.table() "note que primero se deben calcular las frecuencias absolutas"
relativas <- prop.table(absolutas)
relativas
#DIAGRAMAS DE BARRAS PARA CALIFICACION barplot()
barplot(absolutas, col=rainbow(4),xlab="Calificaciones",ylab="Frecuencias absolutas")
#DIAGRAMAS DE BARRAS PARA SEXO barplot()
barplot(table(datos$Sexo), col=rainbow(2),xlab="Sexo",ylab="Frecuencias absolutas")
#DIAGRAMA DE SECTORES PARA CALIFICACION
pie(absolutas, col =rainbow(4))
#HISTOGRAMA PARA LA VARIABLE EDAD
hist(datos$Edad,col = "lightblue",xlab = "Edades", ylab = "Frecuencia", main = "Histograma para Edad")
#HISTOGRAMA PARA LA VARIABLE EDAD
hist(datos$Edad,col = "lightblue",xlab = "Edades", ylab = "Frecuencia", main = "Histograma para Edad")
#GRAFICO BOXPLOT
boxplot(datos$Edad, range = 1.5)
boxplot(datos$Edad, range = 0.5)        #cambio del alargamiento de los bigotes
boxplot(formula = Edad ~ Calificacion, data =  datos)
#GRAFICO BOXPLOT
boxplot(datos$Edad, range = 1.5)
boxplot(datos$Edad, range = 0.5)        #cambio del alargamiento de los bigotes
boxplot(formula = Edad ~ Calificacion, data =  datos)
#Medidas de posici?n
summary(datos$Puntuacion)
#Por separado
#dato minimo
min(datos$Puntuacion)
#dato maximo
max(datos$Puntuacion)
#cuartiles
quantile(datos$Puntuacion, probs = c(0,0.25,0.50, 0.75,1))
#media aritmetica
mean(datos$Puntuacion)
#mediana
median(datos$Puntuacion)
#moda NO HAY FUNCION IMPLEMENTADA
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(datos$Edad)
#ORDENAR DATOS
#DECRECIENTE
sort(datos$Edad, decreasing = FALSE)
#CRECIENTE
sort(datos$Edad, decreasing = TRUE)
M<-max(datos$Puntuacion)
m<-min(datos$Puntuacion)
R<- M-m
R
#varianza
V<-var(datos$Edad, y=NULL, na.rm = FALSE)
s<-sd(datos$Edad, na.rm = TRUE)
V
s
#Coeficiente de variaci?n
media<-mean(datos$Edad)
CV_Edad <- s/media
CV_Edad
library(e1071)
skewness(datos$Edad)
kurtosis(datos$Edad) #comparar con el histograma de las frecuencias absolutas de Edad
library(help = "stats")
library("stats")
library(stats4)
#################################################
##############################################
#DADO
dadoBueno=sample(c('1','2','3','4','5','6'), 100, replace = TRUE);
table(dadoBueno);
dadoBueno
#################################################
##############################################
#DADO
dadoBueno=sample(c('1','2','3','4','5','6'), 100, replace = TRUE);
table(dadoBueno);
dadoBueno
barplot(table(dadoBueno))
dadoTrucoNum=sample(c(1:6), 1000, replace = TRUE,prob = c(2,3,1,9,8,14)) #Sale mÃ¡s veces el resultado 5 y 6: 8 y 14
table(dadoTrucoNum);
dadoTrucoNum
barplot(table(dadoTrucoNum))
summary(table(dadoTrucoNum))
summary(dadoTrucoNum)
################################################
#Variable discreta
estado_informe<-c(1,2,1,2,2,2,3,3,1,4,2,2,2,3,1,4,3,2,1,1,1)
table(estado_informe)
estado_informe<-factor(estado_informe, labels=c("correcto","salvedades1","salvedades2","incorrecto"))
table(estado_informe)
prop.table(table(estado_informe))
round(100*prop.table(table(estado_informe)),1)
barplot(table(estado_informe))
barplot(table(estado_informe),col=c("blue","grey","brown","green"),main="Informe Auditoria")
#--Funciones de probabilidad, densidad distribucion.
dbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
#--Funciones de probabilidad, densidad distribucion.
dbinom(2,size=100,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
#--Funciones de probabilidad, densidad distribucion.
dbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome el valor 2 es,
pbinom(2,size=10,prob=0.2) #Probabilidad que una binomial(10,0.2) tome un valor inferior a 2
################################################
#Normal
a<-rnorm(1000, mean = 0, sd = 1)
hist(a)
################################################
#Normal
a<-rnorm(1000, mean = 0, sd = 4)
hist(a)
################################################
#Normal
a<-rnorm(1000, mean = 0, sd = 30)
hist(a)
################################################
#Normal
a<-rnorm(1000, mean = 0, sd = 200)
hist(a)
################################################
#Normal
a<-rnorm(1000, mean = 0, sd = 1)
hist(a)
boxplot(a)
stem(a)
stem(a) #hace un histograma pero con los datos.
summary(a)
mean(a);
sd(a);
var(a);
quantile(a, probs = seq(0, 1, 0.25))
quantile(a, probs = c(0.1, 0.5, 1))
#Varios graficos en una misma ventana
par(mfrow=c(1,1))      # un solo gr?fico por ventana: la opci?n por defecto
par(mfrow=c(2,1))      # Dibuja una matriz de gr?ficos 2x1: un gr?fico debajo de otro
par(mfrow=c(2,3))      # Matriz de gr?ficos 2 x 3 : dos filas por tres columnas
#Un ejemplo:
x = rnorm(200)          # Se generan 200 valores de una normal estandarizada
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
qqnorm(x)            # Gr?fico cuantil-cuantil de x frente a la distribuci?n
dev.off()
par(mfrow=c(2,2))      # Se crea una matriz de gr?ficos 2 x 2
plot(x)                # Dibujo de x frente al ?ndice 1 a 200
hist(x)              # Histograma de x
boxplot(x)             # Diagrama de caja de x
qqnorm(x)            # Gr?fico cuantil-cuantil de x frente a la distribuci?n
###########################################################
p<-c(0.01,0.025,0.05,0.10,0.9,0.95,0.975,0.99)
q<-c(-3,-2,-1,0,1,2,3)
q<-c(-3,-2,-1,0,1,2,3)
x<-seq(from = -4, to =4, by =0.001)
##############################################
#Funcion de distribuci?n
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) #####calculando probabilidades
qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
##############################################
#Funcion de distribuci?n
pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) #####calculando probabilidades
qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
##############GRAFICAMOS UNA FUNCION DE PROBABILIDAD DE LA NORMAL
b<-dnorm(x, mean = 0, sd = 1, log = FALSE)
plot(x,b,"l")
#exp
x<-sort(rexp(100,2))
y<-dexp(x,2)
plot(x,y,"l")
##############################################
#ANALISIS NORMALIDAD DE UNA MUESTRA ALEATORIA
##############################################
#Para comprobar que el Teorema Central Limite funciona
TamanoMuestra=1000;NumMuestras=100;
muestra=array(0,c(TamanoMuestra,NumMuestras))
SumaMuestra=rep(0,TamanoMuestra)# Definir vector con 0's TamanoMuestra veces
for (i in 1:NumMuestras) {
muestra[,i]=runif(TamanoMuestra,2,4) #llenar columna i con num. aleat. unif.
SumaMuestra=SumaMuestra+muestra[,i]
}
hist(SumaMuestra)
qqnorm(SumaMuestra)
qqplot(SumaMuestra, dist= "norm", labels=FALSE)   #en el segundo argumento puedo poner otra distibuci?n te?rica
hist(SumaMuestra)
qqnorm(SumaMuestra)
qqplot(SumaMuestra, dist= "norm", labels=FALSE)   #en el segundo argumento puedo poner otra distibuci?n te?rica
hist(SumaMuestra)
qqnorm(SumaMuestra)
qqplot(SumaMuestra, dist= "norm", labels=FALSE)   #en el segundo argumento puedo poner otra distibuci?n te?rica
qqplot(SumaMuestra, dist= "norm", labels=FALSE)   #en el segundo argumento puedo poner otra distibuci?n te?rica
library(MASS)
library("stats")
library(stats4)
###########ESTIMADORES PUNTUALES Y POR INTERVALOS DE CONFIANZa
datos<-read.table("datos_eje4.txt", header = TRUE)
###########ESTIMADORES PUNTUALES Y POR INTERVALOS DE CONFIANZa
datos<-read.table("Ejercicios/datos_eje4.txt", header = TRUE)
datos
#############
#estimacion parametros puntuales
ajuste.normal<-fitdistr(datos$x,"normal")
ajuste.normal   #da los estimadores junto con los errores estandarme
mean(datos$x)
sd(datos$x)
mu<-ajuste.normal$estimate[1]            #asignacion de parametros
sigma<-ajuste.normal$estimate[2]
mu
sigma
#Para comprobar si mis datos se modelan bien: pruebas de bondad del ajuste
modelo<-rnorm(100, mean = mu, sd = sigma)
modelo
qqplot(datos$x,  modelo, labels=FALSE)
qqnorm(datos$x)
#Para la media
ci<-mean(datos$x)-qnorm(0.975,0,1)*sd(datos$x)/sqrt(100) #cota inferior conf=95% var conocida
cs<-mean(datos$x)+qnorm(0.975,0,1)*sd(datos$x)/sqrt(100) #cota superior conf=95% var conocida
c(ci,cs)
#p-valor
t.test(x= datos$x, y=modelo, alternative = "greater", mu = 0) #si no ponemos alternative, por defecto lo har? a 2 colas
t.test(x= datos$x, y=modelo, mu = 0)
#p-valor, para no tener que "suponer lo anterior, lo hacemos con la t-student
t.test(x= datos$x, y=modelo, alternative = "greater", mu = 0) #si no ponemos alternative, por defecto lo har? a 2 colas
t.test(x= datos$x, y=modelo, mu = 0)
