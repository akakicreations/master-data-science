##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if (tirada[1] == '7'){
prize <- 80
}else if (tirada[1] == 'BBB'){
prize <- 40
}else if (tirada[1] == 'BB'){
prize <- 25
}else if (tirada[1] == 'B'){
prize <- 10
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
play()
## Función FINAL
play <- function(){
tirada <- get_symbols(wheel, wheel_prob)
print(tirada)
prize <- score(tirada)
return(prize)
}
play()
##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
cherries <- sum('C' %in% tirada)
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if (tirada[1] == '7'){
prize <- 80
}else if (tirada[1] == 'BBB'){
prize <- 40
}else if (tirada[1] == 'BB'){
prize <- 25
}else if (tirada[1] == 'B'){
prize <- 10
}else if (cherries == 2){
prize <- 5
}else if (cherries == 1){
prize <- 2
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
cherries <- sum(tirada == 'C')
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if (tirada[1] == '7'){
prize <- 80
}else if (tirada[1] == 'BBB'){
prize <- 40
}else if (tirada[1] == 'BB'){
prize <- 25
}else if (tirada[1] == 'B'){
prize <- 10
}else if (cherries == 2){
prize <- 5
}else if (cherries == 1){
prize <- 2
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
play()
play()
play()
play()
play()
## Función FINAL
play <- function(){
tirada <- get_symbols(wheel, wheel_prob)
print(tirada)
prize <- score(tirada)
return(prize)
}
##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
cherries <- sum(tirada == 'C')
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if (tirada[1] == '7'){
prize <- 80
}else if (tirada[1] == 'BBB'){
prize <- 40
}else if (tirada[1] == 'BB'){
prize <- 25
}else if (tirada[1] == 'B'){
prize <- 10
}else if (cherries == 2){
prize <- 5
}else if (cherries == 1){
prize <- 2
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
cherries <- sum(tirada == 'C')
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if (tirada[1] == '7'){
prize <- 80
}else if (tirada[1] == 'BBB'){
prize <- 40
}else if (tirada[1] == 'BB'){
prize <- 25
}else if (tirada[1] == 'B'){
prize <- 10
}else if (cherries == 2){
prize <- 5
}else if (cherries == 1){
prize <- 2
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
cherries <- sum(tirada == 'C')
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if (tirada[1] == '7'){
prize <- 80
}else if (tirada[1] == 'BBB'){
prize <- 40
}else if (tirada[1] == 'BB'){
prize <- 25
}else if (tirada[1] == 'B'){
prize <- 10
}else if (cherries == 2){
prize <- 5
}else if (cherries == 1){
prize <- 2
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
play()
play()
play()
play()
play()
##Creamos la función de mostrar premio
score <- function(tirada){
equal <- tirada[1] == tirada[2] & tirada[1] == tirada[3] #Para los primeros premcios que tienen que salir los tres iguales
bars <- all( tirada %in% c('BBB', 'BB', 'B'))
cherries <- sum(tirada == 'C')
if(equal & tirada[1] !="Nada"){ #Teniendo en cuenta que los tres sean símbolo Nada
prize <- 10
if (tirada[1] == 'DD'){
prize<- 100
}else if(tirada[1] == '7'){
prize <- 80
}else if(tirada[1] == 'BBB'){
prize <- 40
}else if(tirada[1] == 'BB'){
prize <- 25
}else if(tirada[1] == 'B'){
prize <- 10
}else if(cherries == 2){
prize <- 5
}else if(cherries == 1){
prize <- 2
}else{
prize<-10
}
print <- (paste('Congrats!', prize))
}else if (bars){
prize<- 5
print <- (paste('Congrats!', prize))
}else{
print('No prize')
prize <- 0
}
return(prize)
}
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play(3)
play(3)
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
play()
sum(tirada == 'C')
sum(tirada == 'C')
source("tragaperras.r")
source("tragaperras.r")
play()
install.packages("tidyverse")
library(tidyverse)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("dslabs")
library(dslabs)
getwd()
dir()
dat <- read.csv("Datasets/murders.csv")
head(dat)
dat <- read.csv("Datasets/murders.csv", stringsAsFactors = F)
sample(dat)
sample(dat, 3)
? sample()
str(dat)
sample.int(data, 3)
sample_n(data)
sample_n(data, 2)
sample_n(dat, 2)
sample_n(dat, 2)
dat2 <- read.delim("DataSets/murdes.csv", sep =",", head=T)
dat2 <- read.delim("DataSets/murders.csv", sep =",", head=T)
counts <- rea.delim ("DataSets/Counts.genes.DiffAll.genes.limma.random.txt", sep ="\t", header=T)
counts <- read.delim ("DataSets/Counts.genes.DiffAll.genes.limma.random.txt", sep ="\t", header=T)
counts.rnaseq=fread ("DataSets/Counts.genes.DiffAll.genes.limma.random.txt", sep ="\t", header=T)
install.packages("data.table")
library(data.table)
counts.rnaseq=fread ("DataSets/Counts.genes.DiffAll.genes.limma.random.txt", sep ="\t", show_progress=T)
counts.rnaseq=fread ("DataSets/Counts.genes.DiffAll.genes.limma.random.txt", sep ="\t", show_Progress=T)
counts.rnaseq=fread ("DataSets/Counts.genes.DiffAll.genes.limma.random.txt", sep ="\t", showProgress = T )
write.table(counts,"DataSets/test.csv", sep=",", row.names=FALSE, quote=FALSE)
dat=read.csv("DataSets/murders.csv")
class(dat)
head(dat)
dat2=read_csv("DataSets/murders.csv")
class(dat2)
head(dat2)
? read_csv
dat2 <- read_csv("DataSets/murders.csv")
dat2
head(dat2)
head(dat)
tibble(x = 1:5, y = x ^ 2)
df1 <- data.frame(x = 1:3, y = 3:1)
class(df1[, 1:2])
class(df1[, 1])
df2 <- tibble(x = 1:3, y = 3:1)
class(df2[, 1:2])
class(df2[, 1])
tibble(x = 1:5, y = x ^ 2)
data.frame(x=1:5,y=(1:5)^2)
df <- data.frame(abc = 1)
df$a
df2 <- tibble(abc = 1)
df2$a
install.packages("RMariaDB")
ensembl_con <- dbConnect(MariaDB(),)
ensembl_con <- dbConnect(MariaDB(),
library(RMariaDB)
ensembl_con <- dbConnect(MariaDB(),
host = "ensembldb.ensembl.org",
user = "anonymous",
port = 5306,
password = "")
dbGetQuery(ensembl_con, "SHOW DATABASES")
dbGetQuery(ensembl_con, "SHOW DATABASES") %>%
# filter the table for cases where the the string "compara" is present
filter(str_detect(Database, "compara")) %>%
tail()
head(compara_homology)
compara_con <- dbConnect(MariaDB(),
dbname = "ensembl_compara_99",
host = "ensembldb.ensembl.org",
user = "anonymous",
port = 5306,
password = "")
library(dbplyr)
src_dbi(compara_con)
compara_homology <- tbl(compara_con, "homology")
head(compara_homology)
compara_linksp <- tbl(compara_con, "method_link_species_set")
head(compara_linksp)
sapiens_ortho <- compara_linksp %>%
filter(name == "H.sap-P.tro orthologues" | name == "H.sap-M.mus orthologues")
sapiens_ortho
compara_result <- sapiens_ortho %>%
left_join(compara_homology, by = "method_link_species_set_id") %>%
collect()
head(compara_result)
compara_result %>%
count(name, description)
compara_result %>%
ggplot(aes(name, ds/dn, fill = description)) +
geom_boxplot() + scale_y_log10()
url="https://en.wikipedia.org/wiki/List_of_countries_by_intentional_homicide_rate"
h <- read_html(url)
library(rvest)
url="https://en.wikipedia.org/wiki/List_of_countries_by_intentional_homicide_rate"
h <- read_html(url)
class(h)
h
tab <- h %>% html_nodes("table")
tab <- tab[[4]] %>% html_table
head(tab)
class(tab)
tab <- tab %>%
select(starts_with("Country"),
Region,Count,Rate,starts_with("Year")) %>%
setNames(c("country", "continent", "total", "murder_rate","year"))
head(tab)
library(jsonlite)
citi_bike <- fromJSON("http://citibikenyc.com/stations/json")
citi_bike$executionTime
head(citi_bike$stationBeanList)
